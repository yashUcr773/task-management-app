// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  bio           String?
  timezone      String?
  notifications Json?     // Store notification preferences as JSON
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts          Account[]
  sessions          Session[]
  organizations     UserOrganization[]
  teamMembers       TeamMember[]
  tasks             Task[]
  assignedTasks     Task[]           @relation("TaskAssignee")
  comments          Comment[]
  activities        Activity[]
  userNotifications Notification[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Organization & Team Management
model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users UserOrganization[]
  teams Team[]
  epics Epic[]

  @@map("organizations")
}

model UserOrganization {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           Role   @default(USER)
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

model Team {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]
  tasks        Task[]
  sprints      Sprint[]

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   TeamRole @default(USER)
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

// Task Management
model Epic {
  id             String   @id @default(cuid())
  title          String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        Task[]

  @@map("epics")
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  teamId    String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team  Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("sprints")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  storyPoints Int?
  dueDate     DateTime?
  shareableId String     @unique @default(cuid())
  isRecurring Boolean    @default(false)
  isArchived  Boolean    @default(false)
  isBlocked   Boolean    @default(false)
  
  // Foreign Keys
  creatorId  String
  assigneeId String?
  teamId     String
  epicId     String?
  sprintId   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator   User   @relation(fields: [creatorId], references: [id])
  assignee  User?  @relation("TaskAssignee", fields: [assigneeId], references: [id])
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  epic      Epic?  @relation(fields: [epicId], references: [id])
  sprint    Sprint? @relation(fields: [sprintId], references: [id])
  
  tags         TaskTag[]
  comments     Comment[]
  activities   Activity[]
  dependencies TaskDependency[] @relation("DependentTask")
  dependents   TaskDependency[] @relation("DependencyTask")

  @@map("tasks")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())

  tasks TaskTag[]

  @@map("tags")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

model TaskDependency {
  id            String @id @default(cuid())
  dependentId   String // Task that depends on another
  dependencyId  String // Task that is depended upon
  createdAt     DateTime @default(now())

  dependent  Task @relation("DependentTask", fields: [dependentId], references: [id], onDelete: Cascade)
  dependency Task @relation("DependencyTask", fields: [dependencyId], references: [id], onDelete: Cascade)

  @@unique([dependentId, dependencyId])
  @@map("task_dependencies")
}

// Comments & Activity
model Comment {
  id      String @id @default(cuid())
  content String
  taskId  String
  userId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  taskId      String?
  userId      String
  metadata    String?      // JSON string for additional data
  createdAt   DateTime     @default(now())

  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // info, success, warning, error
  readAt    DateTime?
  actionUrl String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum Role {
  ADMIN
  USER
  VIEWER
}

enum TeamRole {
  ADMIN
  USER
  VIEWER
}

enum TaskStatus {
  PICKED
  TODO
  IN_DEV
  WITH_QA
  READY
  AWAITING_INPUTS
  RELEASED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_DELETED
  COMMENT_ADDED
  STATUS_CHANGED
  PRIORITY_CHANGED
}
